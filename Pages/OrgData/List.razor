@page "/OrgData/List"
@using my_orange_easyxls.DTO
@using my_orange_easyxls.Service
@using my_orange_easyxls.Models
@inject OrgDataService mService
@inject OrgFieldService orgFieldService
@inject XlsFileService xlsFileService
@attribute [Authorize(Roles = "Admin, User")]
@inject NavigationManager nv
@using Microsoft.AspNetCore.Components.Web
@inject DialogService dlg
<RadzenDialog></RadzenDialog>
<div class="container">
    <div class="row" style="padding-bottom:30px">
        <div class="col-md-5">
            <h4>数据查询和导出</h4>
        </div>
        <div class="col-md-5 text-end"></div>
    </div>

    <div class="row" style="padding-bottom:10px">
        <div class="col-md-1">
            <!-- 第一列：仅文本，实际使用时可能需要将其包装在适当的标签中，如<label> -->
            <p class="mb-0">请选择</p>
        </div>
        <div class="col-md-4">
            <!-- 第二列：下拉选择框 -->
            <RadzenDropDown @bind-Value="@SelectDataDescValue" Data="@lstDataDesc"                          
                            Style="width: 100%; " Name="ddlDataDesc"
                            Change="@(args => OnDataDescOptionChanged())" />
            
        </div>
        <div class="col-md-4">
            <!-- 第二列：下拉选择框 -->
           
            <RadzenDropDown @bind-Value="@SelectDataNameValue" Data="@lstDataName"
                            Style="width: 100%; " Name="ddlDataName"
                            Change="@(args => OnDataNameOptionChanged())" />
        </div>
 
    
        <div class="col-md-1">
            <!-- 最后一列：搜索按钮 -->
            <button class="btn btn-primary btn-block" @onclick="SearchData">搜索</button>
           
        </div>
        <div class="col-md-2">
            <button class="btn btn-danger btn-block" @onclick="ShowDeleteAllDlg">清空数据</button>
            
        </div>
    </div>
     @foreach (var s in lstSearchDTO)
    {
       
            <div class="row" style="padding-bottom:5px">
                <div class="col-md-1">
                选择列
            </div>
            <div class="col-md-2">
                <RadzenDropDown @bind-Value="@s.FieldName" Data="@lstFieldName"
                                Style="width: 100%; " Name="ddlFieldName" 
                                 />
            </div>
            <div class="col-md-2">
                <RadzenDropDown @bind-Value="@s.Condition" Data="@lstCondition"
                                TextProperty="@nameof(SearchConditionDTO.Name)"
                                ValueProperty="@nameof(SearchConditionDTO.Mark)"
                                Style="width: 100%; " Name="ddlFieldName"
                                Change="@(args => OnSearchConditionOptionChanged(args))" />
            </div>
            <div class="col-md-6">
                <textarea rows="@RowCount" class="form-control" @bind="@s.SearchValue" placeholder="请输入搜索内容,多项数据使用,分割" />
            </div>
             
            </div>

         
       
    }
    <div class="row" style="padding-bottom:10px">
        <div class="col-md-1">
            选范围
        </div>
        <div class="col-md-2">
            <RadzenDropDown @bind-Value="@LeftFieldNameValue" Data="@lstFieldName"
                            Style="width: 100%; " Name="ddlFieldName" />
        </div>
        <div class="col-md-2">
            <RadzenDropDown @bind-Value="@LeftConditionValue" Data="@lstOutCondition"
                            TextProperty="@nameof(SearchConditionDTO.Name)"
                            ValueProperty="@nameof(SearchConditionDTO.Mark)"
                            Style="width: 100%; " Name="ddlOutCondition" />
           
        </div>
        <div class="col-md-2">
            <RadzenDropDown @bind-Value="@LeftDataDescValue" Data="@lstDataDesc"
                            Style="width: 100%; " Name="ddlDataDesc"
                            Change="@(args => OnDataDescOptionChanged2())" />
           
        </div>
        <div class="col-md-2">

            <RadzenDropDown @bind-Value="@LeftDataNameValue" Data="@lstDataName2"
                            Style="width: 100%; " Name="ddlDataName"
                            Change="@(args => OnDataNameOptionChanged2())" />

             

            
               
            
        </div>
        <div class="col-md-2">
            <RadzenDropDown @bind-Value="@LeftOutFieldNameValue" Data="@lstFieldName2"
                            Style="width: 100%; " Name="ddlFieldName" />
        </div>
    </div>
    <div class="row" style="padding-bottom:10px;padding-top:5px">
        <div class="col-md-1">
            <!-- 第一列：仅文本，实际使用时可能需要将其包装在适当的标签中，如<label> -->
            
        </div>
        <div class="col-md-2">
            <!-- 第二列：下拉选择框 -->
             

        </div>
        <div class="col-md-2">
            <!-- 第二列：下拉选择框 -->


        </div>
        <div class="col-md-2">
            <!-- 第二列：下拉选择框 -->


        </div>
        <div class="col-md-2 text-left" style="padding-top:10px">
           
            <!-- 第二列：下拉选择框 -->
            <InputCheckbox class="form-check-input "  @bind-Value="IsApplyAllSheet"></InputCheckbox> 适用于所有工作簿
 
        </div>     
        <div class="col-md-2 text-end">
            <button class="btn btn-success btn-block" @onclick="ExportSearchData">导出查询数据</button>

        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">编号</th>
                    <th scope="col">文件名</th>
                    <th scope="col">工作簿</th>
                    @foreach (var s in lstDisplayFieldName)
                    {                     
                        <th scope="col">@s</th>                     
                    }                
                    <th scope="col">导入时间</th>                    
                    
                </tr>
            </thead>
            <tbody>
                @if (lst != null)
                {
                    @foreach (var item in lst)
                    {
                        <tr>
                            <td>@item.Id</td>
                            <td >@item.Datadesc</td>
                            <td >@item.Dataname</td>
                            <td> @item.Field1</td>
                            <td> @item.Field2</td>
                            <td> @item.Field3</td>
                            <td>
                                @item.Createtime.ToString("yyyy-MM-dd")
                            </td>

                              
                        </tr>
                    }
                }




                <!-- 你可以继续添加更多的行 -->
            </tbody>
        </table>
    </div>
    <div class="d-flex justify-content-between mt-3">
        <div>
            <span>总数: @(TotalCount)</span>

        </div>
        <RadzenPager ShowPagingSummary="true"
                     PagingSummaryFormat="@("")"
                     HorizontalAlign="HorizontalAlign.Right"
                     Count="TotalCount" PageSize="@pageSize"
                     PageNumbersCount="5"
                     PageChanged="@PageChanged" />

    </div>


</div>



@code {

    private List<Org_dataDTO> lst;
    private SearchDTO searchDTO = new SearchDTO() { FieldName = "Field1", SearchValue = "" };
    private String PageHtml = "";
    private int TotalCount = 0;

    //string pagingSummaryFormat = "";
    int pageSize = MyPage.PageSize;
    private int RowCount = 1;
    //int count;

    private List<String> lstDataDesc = new List<string>();
    private List<String> lstDataName = new List<string>();

    //private List<String> lstDataDesc = new List<string>();
    private List<String> lstDataName2 = new List<string>();

    private List<String> lstFieldName = new List<string>();
    private List<String> lstFieldName2 = new List<string>();
    private List<String> lstDisplayFieldName = new List<string>();
    private List<SearchConditionDTO> lstCondition = new List<SearchConditionDTO>();
    private List<SearchConditionDTO> lstOutCondition = new List<SearchConditionDTO>();
    private SearchDTO[] lstSearchDTO ;

    private string SelectDataDescValue = "";
    private string SelectDataNameValue = "";
    private string SelecFieldNameValue = "";
    private String SelectContitionValue = "";    
    private int MaxFieldCount = 3;
    private int indexField    = 0;
    private bool IsApplyAllSheet = false;

    protected override async Task OnInitializedAsync()
    {
        await GetData(1);
        lstDataDesc  = await orgFieldService.GetDatadesc();
        lstCondition = SearchConditionDTO.Get();
        lstOutCondition = SearchConditionDTO.GetOut();
        BindSearchDTO();

    }


    private string GetSearchFieldName(string value)
    {
        int index = lstFieldName.IndexOf(value);
        return index < 0 ? "Field1" : "Field" + (index + 1).ToString();
    }
    private string GetSearchFieldName(List<string> lst,string value)
    {
        int index = lst.IndexOf(value);
        return index < 0 ? "Field1" : "Field" + (index + 1).ToString();
    }

    private async void BindSearchDTO()
    {
        if (!String.IsNullOrEmpty(this.SelectDataNameValue))
        {
            lstFieldName = await orgFieldService.GetFieldname(this.SelectDataNameValue, this.SelectDataDescValue);
        }
        else
        {
            lstFieldName = new List<string>()
                        {
                            "字段1",
                            "字段2",
                            "字段3"

                        };
        }

        lstSearchDTO = new SearchDTO[this.lstFieldName.Count];
        for (int i = 0; i < lstSearchDTO.Length; i++)
        {
            lstSearchDTO[i] = new SearchDTO()
                    {
                        FieldName = "",
                        Condition = "",
                        SearchValue = ""
                    };
        }

        lstDisplayFieldName = lstFieldName.Take(3).ToList();
    }
    private SearchDTO[] GetRightSearchDTO()
    {
        SearchDTO[] _lst = lstSearchDTO ==null? null: new SearchDTO[lstSearchDTO.Length];
        if (lstSearchDTO != null)
        {
            var i = 0;
            foreach (var s in lstSearchDTO)
            {
                var fieldName = string.IsNullOrEmpty(s.FieldName) == false?this.GetSearchFieldName(s.FieldName) : s.FieldName;
                var d = new SearchDTO()
                    {
                        FieldName   = fieldName,
                        SearchValue = s.SearchValue,
                        Condition   = s.Condition

                   };

                _lst[i] = d;
                i = i + 1;
            }
        }

        return _lst;

    }
    private async Task GetData(int pageIndex)
    {

        var _lstSearchDTO = this.GetRightSearchDTO();

        var searchResultDTO =  await mService.GetList(this.SelectDataDescValue, this.SelectDataNameValue,
                _lstSearchDTO, pageIndex, this.LeftDataDescValue, LeftDataNameValue, 
                this.GetSearchFieldName(this.lstFieldName,this.LeftFieldNameValue), 
                GetSearchFieldName(this.lstFieldName2,this.LeftOutFieldNameValue));

        lst                      = searchResultDTO.Data;
        TotalCount               = searchResultDTO.TotalCount;



    }

    private async void OnDataDescOptionChanged()
    {

        this.lstDataName = await orgFieldService.GetDataname(SelectDataDescValue);



    }
    private async void OnDataDescOptionChanged2()
    {

        this.lstDataName2 = await orgFieldService.GetDataname(LeftDataDescValue);



    }

    private void OnSearchConditionOptionChanged(Object args)
    {
        if (args != null && args.ToString().IndexOf("in") > -1)
        {
            this.RowCount = 2;
        }
        else
        {
            this.RowCount = 1;
        }

    }

    private async void OnDataNameOptionChanged()
    {
        BindSearchDTO();
    }

    private async void OnDataNameOptionChanged2()
    {
        if (!String.IsNullOrEmpty(this.LeftDataNameValue))
        {
            var lst       = await orgFieldService.GetFieldname(this.LeftDataNameValue, this.LeftDataDescValue);
            lstFieldName2 = lst.Take(1).ToList<String>();
        }
        else
        {
            lstFieldName2 = new List<string>()
                        {
                            "字段1",
                            "字段2",
                            "字段3"

                        };
        }
        // BindSearchDTO();
    }



    private async Task SearchData()
    {
        await GetData(1);

    }

    private async Task PageChanged(PagerEventArgs args)
    {
        await GetData(args.PageIndex + 1);
    }

    private bool showDeleteModal = false;
    private int mId              = 0;

    /// <summary>
    /// 设置项目ID
    /// </summary>
    /// <param name="id"></param>
    private async Task showDeleteDlg(int id)
    {
        this.mId = id;
        var dlgResult = await dlg.Confirm("您确定要删除吗?", "提示", new ConfirmOptions() { OkButtonText = "确定", CancelButtonText = "取消" });
        if ((bool)dlgResult)
        {

            var blnDelete = await mService.Delete(new Org_dataDTO() { Id = this.mId });
            var info = blnDelete ? "删除成功" : "删除失败";
            await dlg.Alert(info, "提示", new AlertOptions() { OkButtonText = "确定" });
            StateHasChanged();

        }
    }

    private async Task ExportSearchData()
    {
        //01 获取查询数据
        var _lstSearchDTO = this.GetRightSearchDTO();
        if (this.IsApplyAllSheet == false)
        {
            var lstData = await mService.GetAllList(this.SelectDataDescValue, this.SelectDataNameValue,
            _lstSearchDTO, this.LeftDataDescValue, this.LeftDataNameValue,  
              this.GetSearchFieldName(this.lstFieldName,this.LeftFieldNameValue),
            this.LeftOutFieldNameValue);

            xlsFileService.ExportFile(this.lstFieldName, this.SelectDataNameValue, lstData);

        }
        else
        {
            List<ExportDataDTO> lstExport = new List<ExportDataDTO>();
            foreach (var s in lstDataName)
            {
                var item = new ExportDataDTO();
                var lstData = await mService.GetAllList(this.SelectDataDescValue, s,
                            _lstSearchDTO, this.LeftDataDescValue, this.LeftDataNameValue, 
                               this.GetSearchFieldName(this.lstFieldName,this.LeftFieldNameValue),
                            this.LeftOutFieldNameValue);
                var lstHeader = await orgFieldService.GetFieldname(s, this.SelectDataDescValue);
                item.SheetName = s;
                item.lstHeader = lstHeader;
                item.lstData = lstData;
                lstExport.Add(item);
            }
           
            xlsFileService.ExportFile(lstExport);
            
        }


        await dlg.Alert("导出完成", "提示", new AlertOptions() { OkButtonText = "确定" });
     

    }

    private String LeftFieldNameValue  = "";
    private String LeftConditionValue  = "";
    private String LeftOutFieldNameValue  = "";
    private String LeftDataNameValue = "";
    private string LeftDataDescValue = "";
    //显示高级搜索窗口
  

  

    private async Task ShowDeleteAllDlg()
    {
        //this.mId = id;
        var dlgResult = await dlg.Confirm("您确定要删除所有数据吗?", "提示", new ConfirmOptions() { OkButtonText = "确定", CancelButtonText = "取消" });
        if ((bool)dlgResult)
        {
            dlg.Close();
            var blnDelete = await mService.DeleteAll(this.SelectDataDescValue,this.SelectDataNameValue);
            var info = blnDelete ? "删除成功" : "删除失败";
            await dlg.Alert(info, "提示", new AlertOptions() { OkButtonText = "确定" });
            await SearchData();

        }
    }





}
